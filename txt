using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Web;
using System.Web.Mvc;
using CarInfoManagement_MVCController.Models;
using Car_Info_Management.Models.Entities;
using Car_Info_Management.Controllers;
using Car_Info_Management;
using Microsoft.Ajax.Utilities;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using Microsoft.Owin.Security.Provider;
using Newtonsoft.Json;


namespace CarInfoManagement_MVCController.Controllers
{
    public class CarManufacturersController : Controller
    {
        private readonly HttpClient _httpClient;
        public CarManufacturersController()
        {
            _httpClient = new HttpClient
            {
                BaseAddress = new Uri("https://localhost:44388/api")
            };
        }
        //private ApplicationDbContext db = new ApplicationDbContext();
        //private CarManufacturersController obj = new CarManufacturersController();


        // GET: CarManufacturers
        public async Task<ActionResult> Index()
        {
            HttpResponseMessage response = await HelperIndex();
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadAsStringAsync();
                var carManufacturers = JsonConvert.DeserializeObject<IEnumerable<Manufacturer>>(data);
                return View(carManufacturers);
            }
            return View(new List<Manufacturer>());

        }

        private async Task<HttpResponseMessage> HelperIndex()
        {
            HttpResponseMessage response = await _httpClient.GetAsync("CarManufacturers");

            return response;
        }


        // GET: CarTransmissionTypes/Details/5
        public async Task<ActionResult> Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            HttpResponseMessage response = await HelperDetails(id);
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadAsStringAsync();
                var carManufacturerType = JsonConvert.DeserializeObject<Manufacturer>(data);
                return View(carManufacturerType);
            }
            return HttpNotFound();
        }

        private async Task<HttpResponseMessage> HelperDetails(int? id)
        {
            HttpResponseMessage response = await _httpClient.GetAsync($"CarManufacturers/{id}");
            return response;
        }

        // GET: CarTransmissionTypes/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: CarManufacturerTypes/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Create([Bind(Include = "Id,Type")] Manufacturer manufacturers)
        {
            if (ModelState.IsValid)
            {
                var content = new StringContent(JsonConvert.SerializeObject(manufacturers), System.Text.Encoding.UTF8, "application/json");
                HttpResponseMessage response = await _httpClient.PostAsync("CarManufacturers", content);
                if (response.IsSuccessStatusCode)
                {
                    return RedirectToAction("Index");
                }
            }

            return View(manufacturers);
        }

        // GET: CarTransmissionTypes/Edit/5
        public async Task<ActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            HttpResponseMessage response = await _httpClient.GetAsync($"CarManufactures/{id}");
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadAsStringAsync();
                var carManufacturesType = JsonConvert.DeserializeObject<Manufacturer>(data);
                return View(carManufacturesType);
            }
            return HttpNotFound();
        }

        // POST: CarTransmissionTypes/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit([Bind(Include = "Id,Type")] Manufacturer manufacturer)
        {
            if (ModelState.IsValid)
            {
                var content = new StringContent(JsonConvert.SerializeObject(manufacturer), System.Text.Encoding.UTF8, "application/json");
                HttpResponseMessage response = await _httpClient.PutAsync($"CarManufacturers/{manufacturer.Id}", content);
                if (response.IsSuccessStatusCode)
                {
                    return RedirectToAction("Index");
                }
            }
            return View(manufacturer);
        }

        // GET: CarTransmissionTypes/Delete/5
        public async Task<ActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            HttpResponseMessage response = await _httpClient.GetAsync($"CarManufacturers/{id}");
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadAsStringAsync();
                var carManufacturers = JsonConvert.DeserializeObject<Manufacturer>(data);
                return View(carManufacturers);
            }
            return HttpNotFound();
        }

        // POST: CarTransmissionTypes/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> DeleteConfirmed(int id)
        {
            HttpResponseMessage response = await _httpClient.DeleteAsync($"CarManufacturers/{id}");
            if (response.IsSuccessStatusCode)
            {
                return RedirectToAction("Index");
            }
            return HttpNotFound();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _httpClient.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
